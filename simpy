import matplotlib.pyplot as plt
import numpy as np
class Core:
    def __init__(self):
        self.registers = [0] * 32
        self.pc = 0
        self.program = []

    def execute(self, memory):
        parts = self.program[self.pc].split()
        opcode = parts[0]
        print(opcode)
        if opcode == "ADD":
            # ADD X1 X2 X3
            rd = int(parts[1][1:])
            rs1 = int(parts[2][1:])
            rs2 = int(parts[3][1:])
            self.registers[rd] = self.registers[rs1] + self.registers[rs2]
        # LD X5 4
        elif opcode == "LD":
            rd = int(parts[1][1:])
            location = int(parts[2])
            self.registers[rd] = memory[location]
        self.pc += 1


class Processor:
    def __init__(self):
        self.memory = [0] * 4096
        self.clock = 0
        self.cores = [Core(), Core()]

    def run(self):
        while self.clock < max(len(self.cores[0].program), len(self.cores[1].program)):
            for i in range(2):
                if self.clock < len(self.cores[i].program):
                    self.cores[i].execute(self.memory)
            self.clock += 1


sim = Processor()
sim.cores[0].registers[2] = 8
sim.memory[5] = 18
for i in range(2):
    print(sim.cores[i].registers)
print("+============ Before Run ============:")
sim.cores[0].program = ["ADD X1 X2 X3", "LD X5 5"]
sim.cores[1].program = ["ADD X1 X2 X3", "LD X5 5"]
sim.run()
for i in range(2):
    print(sim.cores[i].registers)
# LD is not implemented right
data = np.array([sim.cores[0].registers, sim.cores[1].registers])
plt.imshow(data, cmap="Blues")
for i in range(2):
    for j in range(32):
        plt.text(j, i, str(sim.cores[i].registers[j]), va='center', ha = 'center', color = 'red')
plt.axis('off')
plt.show()